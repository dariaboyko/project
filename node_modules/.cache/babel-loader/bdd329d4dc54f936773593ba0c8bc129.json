{"ast":null,"code":"import actionPromise from \"./ActionPromise\";\nimport store from \"./Store\";\n\nconst getGQL = url => function (query) {\n  let variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(localStorage.authToken ? {\n        Authorization: \"Bearer \" + localStorage.authToken\n      } : {}),\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  }).then(res => res.json()).then(data => {\n    if (data.data) {\n      return Object.values(data.data)[0];\n    } else throw new Error(JSON.stringify(data.errors));\n  });\n};\n\nconst URL = `http://shop-roles.node.ed.asmer.org.ua/`;\nconst gql = getGQL(`${URL}graphql`);\n\nconst actionAuthLogin = token => (dispatch, getState) => {\n  const oldState = getState().auth;\n  dispatch({\n    type: 'AUTH_LOGIN',\n    token\n  });\n  const newState = getState().auth;\n\n  if (newState !== oldState) {\n    localStorage.authToken = token;\n  }\n};\n\nconst actionFullLogin = (login, password) => {\n  localStorage.authToken = \"\";\n\n  async dispatch => {\n    const gqlQuery = `query log($login:String, $password:String){\n            login(login:$login, password:$password)\n        }`;\n    const gqlPromise = gql(gqlQuery, {\n      login,\n      password\n    });\n    const action = actionPromise('login', gqlPromise);\n    const result = await dispatch(action);\n    dispatch(actionAuthLogin(result));\n  };\n};\n\nif (localStorage.authToken) {\n  store.dispatch(actionAuthLogin(localStorage.authToken));\n}\n\nexport default actionFullLogin;","map":{"version":3,"names":["actionPromise","store","getGQL","url","query","variables","fetch","method","headers","localStorage","authToken","Authorization","Accept","body","JSON","stringify","then","res","json","data","Object","values","Error","errors","URL","gql","actionAuthLogin","token","dispatch","getState","oldState","auth","type","newState","actionFullLogin","login","password","gqlQuery","gqlPromise","action","result"],"sources":["/Users/karen3/Documents/GitHub/project/src/components/ActionFullLogin.js"],"sourcesContent":["import actionPromise from \"./ActionPromise\";\nimport store from \"./Store\";\nconst getGQL = url =>\n    (query, variables = {}) =>\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...(localStorage.authToken ? { Authorization: \"Bearer \" + localStorage.authToken } : {}),\n                Accept: \"application/json\",\n            },\n            body: JSON.stringify({ query, variables }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.data) {\n                    return Object.values(data.data)[0];\n                } else throw new Error(JSON.stringify(data.errors));\n            });\n\nconst URL = `http://shop-roles.node.ed.asmer.org.ua/`\n\nconst gql = getGQL(`${URL}graphql`)\n\n\nconst actionAuthLogin = (token) => \n    (dispatch, getState) => {\n        const oldState = getState().auth\n        dispatch({type: 'AUTH_LOGIN', token})\n        const newState = getState().auth\n        if (newState !== oldState){\n            localStorage.authToken = token\n        }        \n    }\n\nconst actionFullLogin = (login, password) =>\n   { localStorage.authToken=\"\";\n    async (dispatch) => {\n        const gqlQuery = `query log($login:String, $password:String){\n            login(login:$login, password:$password)\n        }`\n        const gqlPromise = gql(gqlQuery, {login, password})\n        const action     = actionPromise('login', gqlPromise) \n        const result     = await dispatch(action)\n        dispatch(actionAuthLogin(result))\n    }}\n\n    if (localStorage.authToken){\n        store.dispatch(actionAuthLogin(localStorage.authToken))\n    }\nexport default actionFullLogin;"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,MAAMC,MAAM,GAAGC,GAAG,IACd,UAACC,KAAD;EAAA,IAAQC,SAAR,uEAAoB,EAApB;EAAA,OACIC,KAAK,CAACH,GAAD,EAAM;IACPI,MAAM,EAAE,MADD;IAEPC,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,IAAIC,YAAY,CAACC,SAAb,GAAyB;QAAEC,aAAa,EAAE,YAAYF,YAAY,CAACC;MAA1C,CAAzB,GAAiF,EAArF,CAFK;MAGLE,MAAM,EAAE;IAHH,CAFF;IAOPC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEX,KAAF;MAASC;IAAT,CAAf;EAPC,CAAN,CAAL,CASKW,IATL,CASWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATnB,EAUKF,IAVL,CAUWG,IAAD,IAAU;IACZ,IAAIA,IAAI,CAACA,IAAT,EAAe;MACX,OAAOC,MAAM,CAACC,MAAP,CAAcF,IAAI,CAACA,IAAnB,EAAyB,CAAzB,CAAP;IACH,CAFD,MAEO,MAAM,IAAIG,KAAJ,CAAUR,IAAI,CAACC,SAAL,CAAeI,IAAI,CAACI,MAApB,CAAV,CAAN;EACV,CAdL,CADJ;AAAA,CADJ;;AAkBA,MAAMC,GAAG,GAAI,yCAAb;AAEA,MAAMC,GAAG,GAAGvB,MAAM,CAAE,GAAEsB,GAAI,SAAR,CAAlB;;AAGA,MAAME,eAAe,GAAIC,KAAD,IACpB,CAACC,QAAD,EAAWC,QAAX,KAAwB;EACpB,MAAMC,QAAQ,GAAGD,QAAQ,GAAGE,IAA5B;EACAH,QAAQ,CAAC;IAACI,IAAI,EAAE,YAAP;IAAqBL;EAArB,CAAD,CAAR;EACA,MAAMM,QAAQ,GAAGJ,QAAQ,GAAGE,IAA5B;;EACA,IAAIE,QAAQ,KAAKH,QAAjB,EAA0B;IACtBrB,YAAY,CAACC,SAAb,GAAyBiB,KAAzB;EACH;AACJ,CARL;;AAUA,MAAMO,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KACrB;EAAE3B,YAAY,CAACC,SAAb,GAAuB,EAAvB;;EACD,MAAOkB,QAAP,IAAoB;IAChB,MAAMS,QAAQ,GAAI;AAC1B;AACA,UAFQ;IAGA,MAAMC,UAAU,GAAGb,GAAG,CAACY,QAAD,EAAW;MAACF,KAAD;MAAQC;IAAR,CAAX,CAAtB;IACA,MAAMG,MAAM,GAAOvC,aAAa,CAAC,OAAD,EAAUsC,UAAV,CAAhC;IACA,MAAME,MAAM,GAAO,MAAMZ,QAAQ,CAACW,MAAD,CAAjC;IACAX,QAAQ,CAACF,eAAe,CAACc,MAAD,CAAhB,CAAR;EACH,CARD;AAQE,CAVN;;AAYI,IAAI/B,YAAY,CAACC,SAAjB,EAA2B;EACvBT,KAAK,CAAC2B,QAAN,CAAeF,eAAe,CAACjB,YAAY,CAACC,SAAd,CAA9B;AACH;;AACL,eAAewB,eAAf"},"metadata":{},"sourceType":"module"}